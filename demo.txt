canGo
같은 색 말있는 곳으로는 못감
다른 색은 갈수 있음
폰 2칸 이동 구현

canAttack
canGo면서 거기에 상대 말 존재
예외 : 폰의 공격

countType

boardAfterMoving
잡으면서 움직이는거랑
그냥 움직이는거

canGetPointHappy
손해 없이 잡을수있거나
그 위치가 공격범위더라도 내가 반격 가능할때

canGetPointSad
잡을수있지만 손해해가 따를때


moveAndGetPointHappy
moveAndGetPointSad
이동뒤 해당 2치 위치를 위협가능.
이때 현재 위치에서는 공격이 불가능해야함
최종 공격 위치가 상대의 공격범위더라도 내가 반격 가능할때 ok
말들의 포인트를 지정할수있음


underAttack

escapeUnderAttack

checked
킹이 공격범위에 있을 경우

escapeCheck
킹을 옮기든
내 다른 말을 옮기든
어떻게든 왕을 안전하게

checkmate
체크상황에서
escapeCheck가 불가능

makeCheckmate




dcgLocate

dcgCanGo

dcgCanAttack

dcgSummarize

dcgMoveAndAttack

dcgCanGetPoint
포인트가 1인지 아닌지에 따라 point뒤에 s가 붙음

dcgMoveAndGetPoint

dcgChecked
얘는 dcgAfterChecked랑 연결됨

dcgAfterChecked



9
canGo(8,8,5,8,rook,white,[pos(5,8,knight,black),pos(8,5,rook,white),pos(8,8,rook,white)]).
canGo(8,8,8,5,rook,white,[pos(5,8,knight,black),pos(8,5,rook,white),pos(8,8,rook,white)]).

10
canGo(2,5,NewRow,NewCol,pawn,black,[pos(2,5,pawn,black)]).

12
dcgCanAttack(black,[pos(1,7,rook,black),pos(4,5,knight,black),pos(3,7,bishop,white)],X,[]).

14
dcgSummarize(black,[pos(1,7,rook,black),pos(2,5,king,black),pos(3,7,pawn,black),pos(4,1,pawn,black),pos(4,3,rook,black),pos(4,5,knight,black),pos(5,8,pawn,black),pos(6,2,pawn,black)],X,[]).

15
boardAfterMoving([pos(2,2,bishop,black),pos(4,1,pawn,white),pos(4,8,rook,black)],BoardAfter,4,8,4,1,rook,black).

16
boardAfterMoving([pos(2,2,bishop,black),pos(4,1,pawn,white),pos(4,8,rook,black)],BoardAfter,2,2,4,4,bishop,black).

20
dcgCanGetPoint(20,white,[pos(1,7,bishop,black),pos(1,8,rook,white),pos(3,8,knight,black),pos(4,4,rook,black),pos(6,2,bishop,white)],X,[]).

25
dcgChecked(black,[pos(1,7,king,black),pos(2,5,rook,black),pos(3,5,bishop,white),pos(3,7,knight,white),pos(3,8,rook,white)],X,[]).

26
dcgMoveAndGetPoint(20,white,[pos(1,7,pawn,white),pos(1,8,rook,white),pos(2,7,pawn,white),pos(2,8,rook,white),pos(5,7,pawn,white),pos(6,7,pawn,white),pos(5,2,bishop,black),pos(7,4,knight,black),pos(8,6,knight,black)],X,[]).
